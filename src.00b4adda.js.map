{"version":3,"sources":["views/CanvasView.ts","sprites/Paddle.ts","Collision.ts","sprites/Ball.ts","setup.ts","sprites/Brick.ts","helpers.ts","index.ts"],"names":[],"mappings":"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","file":"src.00b4adda.js","sourceRoot":"../src","sourcesContent":["// types\nimport { Paddle } from '~/sprites/Paddle';\nimport { Brick } from '~/sprites/Brick';\nimport { Ball } from '~/sprites/Ball';\n\nexport class CanvasView {\n  canvas: HTMLCanvasElement\n  private context: CanvasRenderingContext2D | null\n  private scoreDisplay: HTMLObjectElement | null\n  private start: HTMLObjectElement | null\n  private info: HTMLObjectElement | null\n\n  constructor(canvasName: string) {\n    this.canvas = document.querySelector(canvasName) as HTMLCanvasElement\n    this.context = this.canvas.getContext('2d')\n    this.scoreDisplay = document.querySelector('#score')\n    this.start = document.querySelector('#start')\n    this.info = document.querySelector('#info')\n  }\n\n  /**\n   * Clear the canvas \n   */\n  clear(): void {\n    this.context?.clearRect(0, 0, this.canvas.width, this.canvas.height)\n  }\n\n  /**\n   * Add listener to start button\n   * @param startFunction\n   */\n  initStartButton(startFunction: (view: CanvasView) => void): void {\n    this.start?.addEventListener('click', () => {\n      startFunction(this)\n    })\n  }\n\n  drawScore(score: number): void {\n    if (this.scoreDisplay) this.scoreDisplay.innerText = score.toString()\n  }\n\n  drawInfo(text: string): void {\n    if (this.info) this.info.innerText = text\n  }\n\n  drawSprite(element: Brick | Paddle | Ball): void {\n    if (!element) return\n\n    this.context?.drawImage(\n      element.image,\n      element.pos.x,\n      element.pos.y,\n      element.width,\n      element.height\n    )\n  }\n\n  drawBricks(bricks: Brick[]): void {\n    bricks.forEach(brick => this.drawSprite(brick))\n  }\n}","import { Vector } from '../types';\n\nexport class Paddle {\n  private paddleImage: HTMLImageElement = new Image()\n  private moveLeft: boolean\n  private moveRight: boolean\n\n  constructor(\n    private speed: number,\n    private paddleWidth: number,\n    private paddleHeight: number,\n    private position: Vector,\n    image: string\n  ) {\n    this.moveLeft = false;\n    this.moveRight = false;\n    this.paddleImage.src = image\n\n    // Add Event listeners\n    document.addEventListener('keydown', this.handleKeyDown)\n    document.addEventListener('keyup', this.handleKeyUp)\n  }\n\n  // getters\n  public get width(): number {\n    return this.paddleWidth\n  }\n\n  public get height(): number {\n    return this.paddleHeight\n  }\n\n  public get pos(): Vector {\n    return this.position\n  }\n\n  public get image(): HTMLImageElement {\n    return this.paddleImage\n  }\n\n  public get isMovingLeft(): boolean {\n    return this.moveLeft\n  }\n\n  public get isMovingRight(): boolean {\n    return this.moveRight\n  }\n\n  movePaddle = (): void => {\n    if (this.moveLeft) this.pos.x -= this.speed\n    if (this.moveRight) this.pos.x += this.speed\n  }\n\n  handleKeyUp = ({ code, key }: KeyboardEvent): void => {\n    if (code === \"ArrowLeft\" || key === \"ArrowLeft\") this.moveLeft = false\n    if (code === \"ArrowRight\" || key === \"ArrowRight\") this.moveRight = false\n  }\n\n  handleKeyDown = ({ code, key }: KeyboardEvent): void => {\n    if (code === \"ArrowLeft\" || key === \"ArrowLeft\") this.moveLeft = true\n    if (code === \"ArrowRight\" || key === \"ArrowRight\") this.moveRight = true\n  }\n}\n","// Types\nimport { CanvasView } from \"./views/CanvasView\";\nimport { Paddle } from \"./sprites/Paddle\";\nimport { Brick } from \"./sprites/Brick\";\nimport { Ball } from \"./sprites/Ball\";\n\nexport class Collision {\n  /**\n   * Check if ball is colliding a brick\n   * @param ball \n   * @param brick \n   * @returns true if collision detected\n   */\n  private isCollidingBrick(ball: Ball, brick: Brick): boolean {\n    if (\n      ball.pos.x < brick.pos.x + brick.width &&\n      ball.pos.x + ball.width > brick.pos.x &&\n      ball.pos.y < brick.pos.y + brick.height &&\n      ball.pos.y + ball.height > brick.pos.y\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  isCollidingBricks(ball: Ball, bricks: Brick[]): boolean {\n    let colliding = false;\n\n    bricks.forEach((brick, i) => {\n      if (this.isCollidingBrick(ball, brick)) {\n        ball.changeYDirection();\n\n        if (brick.energy === 1) {\n          bricks.splice(i, 1)\n        } else {\n          brick.energy -= 1\n        }\n        colliding = true\n      }\n    })\n\n    return colliding\n  }\n\n  /**\n   * Check ball collision With paddle & walls\n   * @param ball \n   * @param paddle \n   * @param view \n   */\n  checkBallCollision(ball: Ball, paddle: Paddle, view: CanvasView): void {\n    // 1. Check ball collision with paddle\n    if (\n      ball.pos.x + ball.width > paddle.pos.x &&\n      ball.pos.x < paddle.pos.x + paddle.width &&\n      ball.pos.y + ball.height === paddle.pos.y\n    ) {\n      ball.changeYDirection()\n    }\n\n    // 1. Check ball collision with wall\n    if (\n      ball.pos.x > view.canvas.width - ball.width ||\n      ball.pos.x < 0\n    ) {\n      ball.changeXDirection()\n    }\n\n    // Ball movement Y constraints\n    if (ball.pos.y < 0) {\n      ball.changeYDirection()\n    }\n  }\n}","import { Vector } from '../types';\n\nexport class Ball {\n  private speed: Vector\n  private ballImage: HTMLImageElement = new Image()\n\n  constructor(\n    private ballSize: number,\n    private position: Vector,\n    speed: number,\n    image: string\n  ) {\n    this.speed = {\n      x: speed,\n      y: -speed\n    }\n    this.ballImage.src = image\n  }\n\n  // getters\n  public get width(): number {\n    return this.ballSize\n  }\n\n  public get height(): number {\n    return this.ballSize\n  }\n\n  public get pos(): Vector {\n    return this.position\n  }\n\n  public get image(): HTMLImageElement {\n    return this.ballImage\n  }\n\n  changeYDirection(): void {\n    this.speed.y = -this.speed.y\n  }\n\n  changeXDirection(): void {\n    this.speed.x = -this.speed.x\n  }\n\n  moveBall(): void {\n    this.pos.x += this.speed.x\n    this.pos.y += this.speed.y\n  }\n}","import RED_BRICK_IMAGE from './images/brick-red.png';\nimport BLUE_BRICK_IMAGE from './images/brick-blue.png';\nimport GREEN_BRICK_IMAGE from './images/brick-green.png';\nimport YELLOW_BRICK_IMAGE from './images/brick-yellow.png';\nimport PURPLE_BRICK_IMAGE from './images/brick-purple.png';\n\n// Grab the canvas element for calculating the brick width\n// depending on canvas width\nconst canvas: HTMLCanvasElement | null = document.querySelector('#playField');\n\n// Constants\nexport const STAGE_PADDING = 10;\nexport const STAGE_ROWS = 20;\nexport const STAGE_COLS = 10;\nexport const BRICK_PADDING = 5;\nexport const BRICK_WIDTH = canvas\n  ? Math.floor((canvas.width - STAGE_PADDING * 2) / STAGE_COLS) - BRICK_PADDING\n  : 100;\nexport const BRICK_HEIGHT = canvas\n  ? Math.floor((canvas.height - STAGE_PADDING * 2) / STAGE_ROWS) - BRICK_PADDING\n  : 30;\nexport const PADDLE_WIDTH = 150;\nexport const PADDLE_HEIGHT = 25;\nexport const PADDLE_STARTX = 450;\nexport const PADDLE_SPEED = 10;\nexport const BALL_SPEED = 5;\nexport const BALL_SIZE = 20;\nexport const BALL_STARTX = 500;\nexport const BALL_STARTY = 400;\n\nexport const BRICK_IMAGES: { [key: number]: string } = {\n  1: RED_BRICK_IMAGE,\n  2: GREEN_BRICK_IMAGE,\n  3: YELLOW_BRICK_IMAGE,\n  4: BLUE_BRICK_IMAGE,\n  5: PURPLE_BRICK_IMAGE,\n};\n\nexport const BRICK_ENERGY: { [key: number]: number } = {\n  1: 1, // Red brick\n  2: 1, // Green brick\n  3: 2, // Yellow brick\n  4: 2, // Blue brick\n  5: 3, // Purple brick\n};\n\n// prettier-ignore\nexport const LEVEL = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 1, 1, 1, 1, 1, 1, 0, 0,\n  0, 2, 2, 2, 2, 2, 2, 2, 2, 0,\n  0, 3, 3, 3, 3, 3, 3, 3, 3, 0,\n  0, 0, 4, 4, 4, 4, 4, 4, 0, 0, \n  0, 0, 5, 5, 0, 0, 5, 5, 0, 0,\n];\n","import { Vector } from '../types';\n\nexport class Brick {\n  private brickImage: HTMLImageElement = new Image()\n\n  constructor(\n    private brickWidth: number,\n    private brickHeight: number,\n    private position: Vector,\n    private brickEnergy: number,\n    image: string\n  ) {\n    this.brickImage.src = image\n  }\n\n  // getters\n  public get width(): number {\n    return this.brickWidth\n  }\n\n  public get height(): number {\n    return this.brickHeight\n  }\n\n  public get pos(): Vector {\n    return this.position\n  }\n\n  public get image(): HTMLImageElement {\n    return this.brickImage\n  }\n\n  public get energy(): number {\n    return this.brickEnergy\n  }\n\n  // setters\n  public set energy(energy: number) {\n    this.brickEnergy = energy;\n  }\n}\n","import {\n  BRICK_IMAGES,\n  BRICK_PADDING,\n  BRICK_WIDTH,\n  BRICK_HEIGHT,\n  BRICK_ENERGY,\n  LEVEL,\n  STAGE_COLS,\n  STAGE_PADDING,\n\n} from \"./setup\";\nimport { Brick } from \"./sprites/Brick\";\n\nexport function createBricks(): Brick[] {\n  return LEVEL.reduce((ack, element, i) => {\n    const row = Math.floor((i + 1) / STAGE_COLS)\n    const col = i % STAGE_COLS\n\n    const x = STAGE_PADDING + col * (BRICK_WIDTH + BRICK_PADDING)\n    const y = STAGE_PADDING + row * (BRICK_HEIGHT + BRICK_PADDING)\n\n    if (element === 0) return ack;\n\n    return [\n      ...ack,\n      new Brick(\n        BRICK_WIDTH,\n        BRICK_HEIGHT,\n        { x, y },\n        BRICK_ENERGY[element],\n        BRICK_IMAGES[element]\n      )\n    ]\n  }, [] as Brick[])\n}","import { CanvasView } from \"./views/CanvasView\";\nimport { Paddle } from \"./sprites/Paddle\";\nimport { Collision } from \"./Collision\";\nimport { Brick } from \"./sprites/Brick\";\nimport { Ball } from \"./sprites/Ball\";\n\n\n// Images\nimport PADDLE_IMAGE from './images/paddle.png'\nimport BALL_IMAGE from './images/ball.png'\n\n// level and colors\nimport {\n  BALL_SIZE,\n  BALL_SPEED,\n  BALL_STARTX,\n  BALL_STARTY,\n  PADDLE_SPEED,\n  PADDLE_WIDTH,\n  PADDLE_HEIGHT,\n  PADDLE_STARTX,\n} from './setup'\n\nimport { createBricks } from \"./helpers\";\n\nlet gameOver = false\nlet score = 0\n\nfunction setGameOver(view: CanvasView) {\n  view.drawInfo('Game Over!!')\n  gameOver = false\n}\n\nfunction setGameWin(view: CanvasView) {\n  view.drawInfo('Game Won!!')\n  gameOver = false\n}\n\nfunction gameLoop(\n  view: CanvasView,\n  bricks: Brick[],\n  paddle: Paddle,\n  ball: Ball,\n  collision: Collision\n) {\n  view.clear()\n  view.drawBricks(bricks)\n  view.drawSprite(paddle)\n  view.drawSprite(ball)\n\n  // Move paddle and check so it won't exit the playfield\n  if (\n    (paddle.isMovingLeft && paddle.pos.x > 0) ||\n    (paddle.isMovingRight && paddle.pos.x < view.canvas.width - paddle.width)\n  ) {\n    paddle.movePaddle()\n  }\n\n  // Move ball\n  ball.moveBall()\n\n  collision.checkBallCollision(ball, paddle, view)\n  const colliding = collision.isCollidingBricks(ball, bricks);\n\n  if (colliding) {\n    score += 1;\n    view.drawScore(score)\n  }\n\n  // Game Over when ball leaves playfield\n  if (ball.pos.y > view.canvas.height) gameOver = true\n\n  // If Game won, set game over and display win\n  if (bricks.length === 0) return setGameWin(view)\n\n  // return if Game Over and don't run requestAnimationFrame\n  if (gameOver) return setGameOver(view)\n\n  requestAnimationFrame(() => gameLoop(view, bricks, paddle, ball, collision))\n}\n\nfunction startGame(view: CanvasView) {\n  // reset displays\n  score = 0;\n  view.drawInfo('')\n  view.drawScore(0)\n\n  // create all bricks \n  const bricks = createBricks();\n\n  // create paddle\n  const paddle = new Paddle(\n    PADDLE_SPEED,\n    PADDLE_WIDTH,\n    PADDLE_HEIGHT,\n    {\n      x: PADDLE_STARTX,\n      y: view.canvas.height - PADDLE_HEIGHT - 5\n    },\n    PADDLE_IMAGE\n  )\n\n  // create ball\n  const ball = new Ball(\n    BALL_SIZE,\n    {\n      x: BALL_STARTX,\n      y: BALL_STARTY\n    },\n    BALL_SPEED,\n    BALL_IMAGE\n  )\n\n  // create collision\n  const collision = new Collision()\n  gameLoop(view, bricks, paddle, ball, collision)\n}\n\n// create a view\nconst view = new CanvasView('#playField')\nview.initStartButton(startGame)\n\n"]}